<?xml version="1.0" encoding="utf-8" ?>
<pages:PopupPage xmlns="http://xamarin.com/schemas/2014/forms"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
              xmlns:pages="clr-namespace:Rg.Plugins.Popup.Pages;assembly=Rg.Plugins.Popup"
             xmlns:animations="clr-namespace:Rg.Plugins.Popup.Animations;assembly=Rg.Plugins.Popup"
             xmlns:local="clr-namespace:TimeTracker.Rendereres;assembly=TimeTracker"
             HasSystemPadding="True"
             xmlns:converters="clr-namespace:TimeTracker.Convertors" 
             x:Class="TimeTracker.Views.AddDayTaskPopupPageView">
    <!--popup animation control-->
    <pages:PopupPage.Animation>
        <animations:ScaleAnimation
          PositionIn="Left"
          PositionOut="Right"
          ScaleIn="1"
          ScaleOut="0.7"
          DurationIn="700"
          EasingIn="BounceOut"/>
    </pages:PopupPage.Animation>
    <pages:PopupPage.Resources>
        <ResourceDictionary>
            <converters:DateTimeToTimeSpanConverter x:Key="dateTimeSpanConverter"></converters:DateTimeToTimeSpanConverter>
            <converters:MultiTriggerConverter x:Key="dataHasBeenEnterdConverter"></converters:MultiTriggerConverter>
            <converters:IsValidTaskTypeSelectedTriggerConverter x:Key="isValidValueSelectedConverter"></converters:IsValidTaskTypeSelectedTriggerConverter>
        </ResourceDictionary>
    </pages:PopupPage.Resources>
    <ScrollView
         HorizontalOptions="Center"
         VerticalOptions="Center">
        <AbsoluteLayout>
            <Frame   
               Margin="30"
               HorizontalOptions="Center"
               BackgroundColor="White">
                <StackLayout WidthRequest="250" HeightRequest="280">
                    <StackLayout   IsVisible="True" x:Name="TaskInputPanel">
                        <Label Text="Start Time" x:Name="startTimeLabel"></Label>
                        <TimePicker x:Name="startTmePicker" Time="{Binding StartTime, Converter={StaticResource dateTimeSpanConverter}}" />
                        <!--picker for task type selection-->
                        <Picker 
                                x:Name="TaskTypePicker" 
                                ItemsSource="{Binding TasktypesList}"
                                HeightRequest="40"
                                IsVisible="False"
                                BackgroundColor="#FAFAFA"
                                SelectedIndexChanged="TypePicker_SelectedIndexChanged"
                                SelectedItem="{Binding SelectedTaskType}"  
                                Title="Select Task Type"/>

                        <!--button to open task type picker  -->
                        <Button
                                BorderColor="{StaticResource ViewsBoarderColor}" 
                                BorderWidth="2" 
                                TextColor="{StaticResource TextColorForPicker}" 
                                HeightRequest="40" 
                                BorderRadius="5" 
                                x:Name="typePickerButton"
                                Margin="0,5,0,0"
                                Clicked="TypePickerButton_Clicked"
                                Text="{Binding SelectedTaskType}"
                                BackgroundColor="Transparent"/>
                        <!--Tasks agains selected task type-->
                        <Picker 
                                x:Name="TaskPicker" 
                                ItemsSource="{Binding TaskList}"
                                HeightRequest="40"
                                IsVisible="False"
                                BackgroundColor="#FAFAFA"
                                SelectedItem="{Binding SelectedTask}"  
                                Title="Select Task"/>

                        <!--button to open task  picker  -->
                        <Button
                                BorderColor="{StaticResource ViewsBoarderColor}" 
                                BorderWidth="2" 
                                TextColor="{StaticResource TextColorForPicker}" 
                                HeightRequest="40" 
                                BorderRadius="5" 
                                x:Name="taskPickerButton"
                                Margin="0,5,0,0"
                                Text="{Binding SelectedTask}"
                                Clicked="TaskPickerButton_Clicked" 
                                BackgroundColor="Transparent"/>

                        <!--save task button-->
                        <Button  
                        HeightRequest="50"
                        Text="Save"
                        IsEnabled="False"   
                        BorderRadius="5"
                        Clicked="SaveButton_Clicked"
                        HorizontalOptions="FillAndExpand">
                            <Button.Triggers>
                                <MultiTrigger TargetType="Button">
                                    <MultiTrigger.Conditions>
                                        <BindingCondition Binding="{Binding  Source={x:Reference typePickerButton},
                                            Path=Text,  
                                            Converter={StaticResource isValidValueSelectedConverter}}"
                                            Value="true" />
                                        <BindingCondition Binding="{Binding  Source={x:Reference taskPickerButton},
                                            Path=Text,  
                                            Converter={StaticResource isValidValueSelectedConverter}}"
                                            Value="true" />
                                    </MultiTrigger.Conditions>
                                    <Setter Property="IsEnabled" Value="True" />
                                </MultiTrigger>
                            </Button.Triggers>
                        </Button>
                    </StackLayout>
                </StackLayout>
            </Frame>
            <!--View hold the cancel image-->
            <ContentView
                  AbsoluteLayout.LayoutFlags="PositionProportional"
                  AbsoluteLayout.LayoutBounds="1, 0, -1, -1">
                <ContentView.GestureRecognizers>
                    <TapGestureRecognizer Tapped="OnCloseButton_Tapped"/>
                </ContentView.GestureRecognizers>
                <!--cancel image-->
                <Image
                    x:Name="CloseImage"
                    HeightRequest="30"
                    WidthRequest="30">
                    <Image.Source>
                        <OnPlatform
                            x:TypeArguments="ImageSource"
                            Android="ic_cancel_96.png" 
                            iOS="ic_cancel_96.png"/>
                    </Image.Source>
                </Image>
            </ContentView>
        </AbsoluteLayout>
    </ScrollView>
</pages:PopupPage>